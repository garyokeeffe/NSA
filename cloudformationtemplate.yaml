Parameters:
  DockerImageUri:
    Type: String
    Description: The URI of the Docker image for the Lambda function.

AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a Lambda function from a Docker image and an API Gateway to trigger the Lambda function

Resources:
  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'DockerizedFlaskNostrApp'
      Code:
        ImageUri: !Ref DockerImageUri
      PackageType: Image
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Architectures: 
        - arm64
      Environment:
        Variables:
          NOSTR_PRIVATE_KEY: !Ref NostrPrivateKey
  MyApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      ProtocolType: HTTP
      Name: 'Nostr-Serverless-API'
  MyApiIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref MyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations'
        - LambdaFunctionArn: !GetAtt MyLambdaFunction.Arn
      PayloadFormatVersion: '2.0'
  MyApiRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref MyApi
      RouteKey: 'ANY /{proxy+}'
      Target: !Join [ '/', [ 'integrations', !Ref MyApiIntegration ] ]
  MyApiDeployment:
    Type: 'AWS::ApiGatewayV2::Deployment'
    DependsOn: MyApiRoute
    Properties:
      ApiId: !Ref MyApi
  MyApiStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref MyApi
      AutoDeploy: true
      DeploymentId: !Ref MyApiDeployment
      StageName: '$default'
  MyApiLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*'

Outputs:
  ApiUrl:
    Description: The URL of the API Gateway
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/"
